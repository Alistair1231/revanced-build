name: Matrix Build Modules
on:
  workflow_call:
    secrets:
      TELEGRAM_TOKEN:
        description: "Telegram Bot Token"
        required: true
      TELEGRAM_TO:
        description: "Telegram Chat ID"
        required: true
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

permissions: write-all

jobs:
  generate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.versionr }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare version
        id: version
        run: 
            version="$(date +v%Y.%m.%d-%H%M)"
            echo "versionr=$version" >> $GITHUB_OUTPUT

      - name: Generate release
        run: |
          version=${{ steps.version.outputs.versionr }}
          gh release create "$version" -t "$version" -p
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  run:
    runs-on: ubuntu-latest
    needs: generate-release
    strategy:
      matrix:
        include:
          - id: "YouTube"
          - id: "Music"

    env:
      RELEASE_VERSION: ${{ needs.generate-release.outputs.version }}
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "20"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.toml
            fi
          fi

      - name: Generate ${{ matrix.id }} config
        run: ./gen_sep_config.sh config.toml ${{ matrix.id }} sep_config.toml
      
      - name: Build modules/APKs
        run: ./build.sh sep_config.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ needs.generate-release.outputs.version }}

      - name: Get output
        id: get_output
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ${{ needs.generate-release.outputs.version }}
          tag: ${{ needs.generate-release.outputs.version }}
          file_glob: true
          overwrite: true
          prerelease: ${{ github.ref != 'refs/heads/main' }}

    #   - name: Update changelog and Magisk update json
    #     id: update_config
    #     run: |
    #       git checkout -f update || git switch --discard-changes --orphan update
    #       cp -f build.tmp build.md
    #       get_update_json() {
    #         echo "{
    #         \"version\": \"$1\",
    #         \"versionCode\": ${{ needs.generate-release.outputs.version }},
    #         \"zipUrl\": \"$2\",
    #         \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build.md\"
    #       }"
    #       }

    #       cd build || { echo "build folder not found"; exit 1; }
    #       for OUTPUT in *magisk*.zip; do
    #         [ "$OUTPUT" = "*magisk*.zip" ] && continue
    #         ZIP_S=$(unzip -p "$OUTPUT" module.prop)
    #         if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
    #         UPDATE_JSON="${UPDATE_JSON##*/}"
    #         VER=$(echo "$ZIP_S" | grep version=)
    #         VER="${VER##*=}"
    #         DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ needs.generate-release.outputs.version }}/${OUTPUT}"
    #         get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
    #       done
    #       cd ..

    #       find . -name "*-update.json" | grep . || : >dummy-update.json

    #   - uses: stefanzweifel/git-auto-commit-action@v5
    #     if: github.ref == 'refs/heads/main'
    #     with:
    #       branch: update
    #       skip_checkout: true
    #       file_pattern: build.md *-update.json
    #       commit_message: Bump version ${{ needs.generate-release.outputs.version }}

      - uses: actions/upload-artifact@v3
        with:
          name: logs
          path: logs
          if-no-files-found: ignore

#   notify:
#     needs: run
#     uses: ./.github/workflows/notify.yml
#     if: github.ref == 'refs/heads/main'
#     secrets:
#       TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
#       TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
